#! /usr/bin/env python
#
#  compare images
#
#  History:
#    30-jul-2020    hacked for dc2019        Peter Teuben
#


import sys
import numpy as np
import numpy.ma as ma
import matplotlib.pyplot as plt
try:
    from astropy.io import fits
except:
    import pyfits as fits

# pip install scikit-image
try:
    import skimage.metrics as skm
    from skimage.metrics import structural_similarity as ssim
except:
    ssim = None

# pip install opencv-python    
try:
    import cv2
except:
    cvs = None
    



def qac_compare(image1, image2, channel=False, method='mse'):

    """    
    image1, image2: two images to compare
    
    channel:   if True, if will return an array (one per channel)
    
    method:    'MSE'    Mean Squared Error
               'SSIM'   Structural Similarity Index (Wang et al 2004)

    returns:    the number (or array) associated with the method
   
    """

    # grab data
    if False:
        tb.open(image1)
        d1 = tb.getcol('map').squeeze()
        tb.close()
        
        tb.open(image2)
        d2 = tb.getcol('map').squeeze()
        tb.close()
    else:
        d1 = fits.open(image1)[0].data.squeeze()
        d2 = fits.open(image2)[0].data.squeeze()
        d1 = ma.masked_invalid(d1)
        d2 = ma.masked_invalid(d2)
        # @todo   logically 'and' the mask

    if d1.shape != d2.shape:
        print('images do not have same shape')
        return -1

    ndim = len(d1.shape)
    print(ndim)

    n = 1
    for s in d1.shape:
        n = n * s

    if ndim == 3:
        nz = d1.shape[0]
        n = d1.shape[1] * d1.shape[2]
        cmp1 = np.zeros(nz)
        for z in range(nz):
            cmp1[z] = np.sum( (d1[z]-d2[z])**2 ) / n
    else:
        # MSE
        cmp1 = np.sum( (d1-d2)**2 ) / n

    if True:
        # NMSE
        cmp1a = skm.normalized_root_mse(d1,d2)
        cmp1b = skm.mean_squared_error(d1,d2)

        # SSIM
        if ssim != None:
            cmp2 = ssim(d1,d2)
            cmp2a = skm.structural_similarity(d1,d2)
        else:
            cmp2 = -1
            cmp2a = -1
            
            
    return cmp1

    #-end of qac_compare()

    
fitsfile1 = sys.argv[1]
fitsfile2 = sys.argv[2]

    
#if len(sys.argv) > 3:   dmin  = float(sys.argv[3])
#if len(sys.argv) > 4:   dmax  = float(sys.argv[4])
#if len(sys.argv) > 5:   sigma = float(sys.argv[5])

a = qac_compare(fitsfile1,fitsfile2)

for ai in a:
    print(ai)
    

