#! /usr/bin/env python
#
#  compare images
#
#  History:
#    30-jul-2020    hacked for dc2019        Peter Teuben
#


import sys
import numpy as np
import numpy.ma as ma
import matplotlib.pyplot as plt
try:
    from astropy.io import fits
except:
    import pyfits as fits

# pip install scikit-image
try:
    import skimage.metrics as skm
except:
    skm = None

# pip install opencv-python    
try:
    import cv2
except:
    cvs = None
    



def qac_compare(image1, image2, channel=False, method='mse'):

    """    
    image1, image2: two images to compare
    
    channel:   if True, if will return an array (one per channel)
    
    method:    'MSE'    Mean Squared Error
               'SSIM'   Structural Similarity Index (Wang et al 2004)

    returns:    the number (or array) associated with the method
   
    """

    # grab data
    if False:
        tb.open(image1)
        d1 = tb.getcol('map').squeeze()
        tb.close()
        
        tb.open(image2)
        d2 = tb.getcol('map').squeeze()
        tb.close()
    else:
        d1 = fits.open(image1)[0].data.squeeze()
        d2 = fits.open(image2)[0].data.squeeze()
        d1 = ma.masked_invalid(d1)
        d2 = ma.masked_invalid(d2)
        m1 = ma.getmask(d1)
        m2 = ma.getmask(d2)
        d1 = ma.masked_where(m2,d1)
        d2 = ma.masked_where(m1,d2)
        d1 = ma.fix_invalid(d1,fill_value=0.0)
        d2 = ma.fix_invalid(d2,fill_value=0.0)

    if d1.shape != d2.shape:
        print('images do not have same shape')
        return -1

    n = 1
    for s in d1.shape:
        n = n * s

    print(d1.min(),d1.max(),d2.min(),d2.max())

    # MSE
    cmp1 = np.sum( (d1-d2)**2 ) / n

    # SSIM
    if skm != None:
        cmp2 = skm.structural_similarity(d1,d2)
        cmp1a = skm.mean_squared_error(d1,d2)
        cmp1b = skm.normalized_root_mse(d1,d2,normalization='euclidean')
        cmp1c = skm.normalized_root_mse(d1,d2,normalization='min-max')
        cmp1d = skm.normalized_root_mse(d1,d2,normalization='mean')
        cmp3 = -1
        # cmp3 = skm.peak_signal_noise_ratio(d1,d2)
        print(cmp1,cmp1a,cmp1b,cmp1c,cmp1d,cmp2,cmp3)
    else:
        print(cmp1)

    #-end of qac_compare()

fitsfile1 = sys.argv[1]
fitsfile2 = sys.argv[2]

qac_compare(fitsfile1,fitsfile2)
    

